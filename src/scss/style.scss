@import "bootstrap";

/*******************
  Project styles
  *******************/

// 3*y = z-(x*4)
// a = y/z
// sectionCount*zoomScale = contextWidth-(gutterWidth*gutterCount)

$sectionCount 	: 3;
$sectionWidth 	: 100%;
$gutterWidth  	: 1%;
$topGutter 		: 220px;

$gutterCount 	: $sectionCount + 1;

$zoomSections 	: $sectionWidth - ($gutterWidth * $gutterCount);

$zoomScale 		: $zoomSections / $sectionCount;

$zoomMultiplier : $zoomScale / $sectionWidth;

// Need zoomed gutter width % to calculate gutters
$gutterZoomedWidth : $gutterWidth / $zoomMultiplier;

body {
	background-color: #333;
	width: 100%;
	overflow:hidden;
	text-rendering: optimizeLegibility;
}

.measure {
	width: 20%;
	height:10px;
	background-color: white;
}

.tenpercent {
	width: 10%;
}

body.zoomed-out {
	.wrapper {
		transform: scale($zoomMultiplier) translate($gutterZoomedWidth / $sectionCount, $topGutter / $zoomMultiplier);
	}
	// Set zoom-in context positions
	.context {

	//	&:nth-child(1) { transform: translate($gutterWidth,10%); }
		&:nth-child(2) { transform: translate($gutterZoomedWidth,0%); }
		&:nth-child(3) { transform: translate($gutterZoomedWidth * 2,0%); }
		&:nth-child(4) { transform: translate($gutterZoomedWidth * 3,0%); }
		&:nth-child(5) { transform: translate($gutterZoomedWidth * 4,0%); }

		&:hover {
			transform: scale(1.05);	
			transform-origin: -14% 50%;
		}

	}
}

// Set zoom-in wrapper positions & btn bgs
body.section-1 {
	.btn-1 {
		background-color: #fefefe;
		&:hover {
			background-color: #fefefe;
		}
	}
}
body.section-2 {
	.btn-2 {
		background-color: #fefefe;
		&:hover {
					background-color: #fefefe;
				}
	}
	.wrapper {
		transform: translate(- $sectionWidth / $sectionCount,0);
	}
}

body.section-3 {
	.btn-3 {
		background-color: #fefefe;
		&:hover {
					background-color: #fefefe;
				}
	}
	.wrapper {
		transform: translate(- $sectionWidth / ($sectionCount / 2),0);
	}
}

body.section-4 {
	.wrapper {
		transform: translate(- $sectionWidth / ($sectionCount / 3),0);
	}
}

body.section-5 {
	.wrapper {
		transform: translate(- $sectionWidth / ($sectionCount / 4),0);
	}
}

.context {
	width: $sectionWidth / $sectionCount;
	padding: 50px;
	height: 100%;
	float: left;
	transform: translate(0%,0%);
	// transform: scale(1) translate(0,0);
	-webkit-transition: all 500ms ease;
	cursor: pointer;
} 

.wrapper {
	clear: both;
	transform: scale(1);
	transform-origin: 0% 0%;
	width: $sectionWidth * $sectionCount;
	-webkit-transition: all 500ms ease;
	.context {
		background-color: #fefefe;
	}
}

// main nav

$navItemWidth : 15%;

$gutterWidthAsPercent : $gutterWidth * $gutterCount;

// section width as percent of the screen
$sectionWidthAsPercent : (100% - $gutterWidthAsPercent ) / $sectionCount ;

$navToSectionRatio : $navItemWidth / $sectionWidthAsPercent;

$navToGutterRatio : $navItemWidth / $gutterWidth;

$sectionWidthAsPercentOfNav : 100% / $navToSectionRatio;

$gutterWidthAsPercentOfNav : 100% / $navToGutterRatio;

$navTopGutter : 200px;


.main-nav {
	a {
		width: $navItemWidth;
		padding: 15px;
		display: block;
		float: left;
		background-color: #e1e1e1;
		color: #222;
		border-right: 1px solid #ccc;

		transform: translate(0%,0%);
		-webkit-transition: all 500ms ease;
		
		&.active {
		//	background-color: #fefefe;
		}
		&:hover {
			text-decoration: none;
			background-color: #c1c1c1;
		}
	}
}

body.zoomed-out {
	.main-nav {
		a {
			&:nth-child(1) { transform: translate($gutterWidthAsPercentOfNav,$navTopGutter); }
			&:nth-child(2) { transform: translate($sectionWidthAsPercentOfNav + ( $gutterWidthAsPercentOfNav * 2 ) - 100%, $navTopGutter); }
			&:nth-child(3) { transform: translate(($sectionWidthAsPercentOfNav * 2) + ( $gutterWidthAsPercentOfNav * 3 ) - 200%, $navTopGutter); }
		}
	}
}







